doctype html
html
  head
      title Just JavaScript
      meta(charset='utf-8')
      script(src='slides.js')
      link(href="https://fonts.googleapis.com/css?family=Bevan|Carter+One|Shrikhand" rel="stylesheet")
      link(href='styles.css'  rel='stylesheet' type='text/css')
    body
      section.slides.layout-regular.template-default
        article.first
          h1(style="font-size:250px;") Slam Dunk JavaScript!

        article
          h1 I&apos;m Wes Bos
          p: img(src="images/canada-flag.png")
          p I make web development courses and have a podcast called Syntax

        article
          p(style="font-size:60px;") These slides will be available shortly after this talk <br>I&apos;ll tweet the link out.
          img(src='images/Twitter_logo_white.png', width='300' style="margin:100px auto")

          h2
            a(href='http://twitter.com/wesbos', target='_blank') @wesbos

        article
          h1(style="font-size:250px;") Getting Better at JavaScript
          p A mix bag of tips and techniques that will make you a better JS developer, regardless of which framework you use

        article.section
          h1 Intersection Observer

        article.section
          h2 How do you know when an element is on screen?

        article
          video.high(src="./images/viewport.mp4" loop controls)

        article
          p With Intersection Observer, you can be alerted when an element is fully or partially scrolled into or out of view.

        article
          h2 Uses
          ul.build
            li Animate elements in on scroll
            li Play video on scroll in
            li Lazy Load images
            li Record views for ads beyond fold
            li Use with sticky headers

        article
          video.high(src="./images/intersection-observer.mp4" loop muted)

        article
          video.high(src="./images/sticky.mp4" loop controls)
          a(href="https://developers.google.com/web/updates/2017/09/sticky-headers") Google Developers

        article
          h1 Ready for Meta?

        article
          video(src="./images/meta.mp4" loop controls)

        article
          h1 How does it work?!

        article
          h2 1. Options
          img(src="./images/screenshots/muk4.png")

        article
          h2 2. Create an empty Observer
          img.wide(src="./images/screenshots/mupq.png")

        article
          h2 3. Give it a callback
          img.wide(src="./images/screenshots/mvSI.png")

        article
          h2 4. Observe Away!
          img.wide(src="./images/screenshots/mvbJ.png")

        article
          img.wide(src="./images/screenshots/mvMC.png")

        article.section
          h1 Resize Observer
          p.sub per-element resize events!

        article
          video.high(style="width: auto; height: 100%; min-width: 0;" src="./images/resizeObserver.mp4" controls loop)
        article
          img.high(src="./images/screenshots/mvNd.png")


        article.section
          h1 Gateway Drug to Element Queries!

        article
          img.high(src="./images/screenshots/mvjO.png")

        article
          video.high(style="width: auto; height: 100%; min-width: 0;" src="./images/resize-video-player.mp4" controls loop)

        article.section
          h1 DOM Element Methods
          p.sub Handy, even in frameworks!

        article
          h2 .closest()
          p Finds the closest ancestor that matches the passed selector

        article.nopad
          img.blow(src="http://wes.io/908f777858f5/content")
        article.nopad
          img.blow(src="http://wes.io/485ae1221e63/content")
        article.nopad
          img.blow(src="http://wes.io/5e6bc9cbd01c/content")
        article.nopad
          img.blow(src="http://wes.io/1d14c376fc97/content")

        article.nopad
          img.blow(src="http://wes.io/aa41e877d5e5/content")
          p Great for Click Outside
        article.nopad
          img.blow(src="http://wes.io/5bc28ecf0a07/content")

        article
          h2 .matches()
          p Does this element match the selector?

        article
          img.blow(src="http://wes.io/1313804c1424/content")

        article
          h2 Event Delegation
          img.blow(src="http://wes.io/3a0159ae934d/content")

        article
          h2 .contains()
        article
          img.blow(src="http://wes.io/b1c404dcb8ef/content")

        article
          h2 Bling.js
          p The best 11 lines of code

        article.nopad
          img.blow(src="http://wes.io/a3642690cd9d/content")

        article.nopad
          img.blow(src="http://wes.io/4a9ce525e9dc/content")

        article.nopad
          img.blow(src="http://wes.io/fae1dd0502e1/content")

        article.nopad
          img.blow(src="http://wes.io/d475384aac9c/content")
        article.nopad
          img.blow(src="http://wes.io/e9cc06f32da9/content")

        article
          h1.medium Intl methods()

        article
          p The Intl object is the namespace for the ECMAScript Internationalization API
        article
          h2 Intl. DateTimeFormat()
        article.nopad
          img.blow(src="images/intl1.png")
        article
          h2 Intl. RelativeTime Format()
        article.nopad
          img.blow(src="images/intl2.png")
        article.nopad
          img.blow(src="images/intl3.png")
        article
          h2 Intl. Number Format()
        article.nopad
          img.blow(src="images/intl4.png")
        article.nopad
          img.blow(src="images/intl5.png")
        article.nopad
          img.blow(src="images/intl6.png")
        article
          h2 Intl. List Format()
        article.nopad
          img.blow(src="images/intl7.png")
        article.nopad
          img.blow(src="images/intl8.png")
        article
          h2 Intl. Plural Rules()
        article.nopad
          img.blow(src="images/intl9.png")
        article.nopad
          img.blow(src="images/intl10.png")
        article
          h2 Intl.Collator()
        article.nopad
          img.blow(src="images/intl11.png")

        article
          h1.medium Data Massaging

        article
          h1 Array.from()
          p Turns an iterable into an array

        article
          img.blow(src="http://wes.io/461217f57fe5/content")
        article
          img.blow(src="http://wes.io/c3e2ef19bbbb/content")

        article
          img.blow(src="http://wes.io/3eb6342bfd63/content")
        article
          h1 Unique-ify
        article
          img.blow(src="http://wes.io/cc0b4155a41d/content")

        article
          h1 ...spread and ...rest

        article
          img.blow(src="http://wes.io/32cf0bb19bc5/content")

        article
          img.blow(src="http://wes.io/be507ee6f918/content")


        article
          h2 Async Flow Control

        article
          h2 Promises are an IOU for something that will happen in the future

        article
          h1 They either resolve() or reject()

        article
          img.blow(src="http://wes.io/1cbba7d77613/content")

        article
          h2 Let's look at some patterns around handling different types of requests



        article
          h1 Promise.all()
          p.sub When all resolve()
          p.sub Short circuits when one reject()s
        article
          p It takes an array of baby promises and makes a Mega promise
          img(src="http://wes.io/80df42462acf/content")
          p They run concurrently (at the same time)
        article
          h1 Promise.race()
          p.sub When one resolve() or reject()
        article
          img.blow(src="http://wes.io/6ce369ebdaa2/content")
        article
          img.blow(src="http://wes.io/58e1e7a936d2/content")
        article
          h1 Promise.any()
          p.sub When one resolve() or all reject()
          p.sub Stage 1
        article
          img.blow(src="http://wes.io/4fe8f7a1c5a0/content")
        article
          h1 Promise
          h1 .allSettled()
          p.sub When all finished - can be mix of resolve() or reject()
          p.sub Stage 3

        article
          img.blow(src="http://wes.io/d79c5d287fc6/content")

        article
          h1 Error Handling
          p.sub A few options


        //- Option 1
        article
          p.sub Option #1
          h1 Make sure Errors Don't Happen
          p.sub Why waste dev time on something that should never happen? #ProblemSolved

        //- Option 2
        article
          p.sub Option #2
          h1 Try / Catch
          p.sub Wrap that sucker in a safety blanket

        article
          img.wide(src="./images/screenshots/nslE.png")

        //- Option 3
        article
          p.sub Option #3
          h1 Higher Order Function
          p.sub Async Functions can chain a .catch()

        article
          p Just Live Your Life
          img.wide(src="./images/screenshots/nsg8.png")

        article
          p Create a HOF
          img.high(src="./images/screenshots/nsi4.png")

        article
          p Hot Shot Implicit Return (WHAT)
          img.wide(src="./images/screenshots/nsbK.png")

        article
          p Create a new function with your HOF
          img.wide(src="https://wes.io/nsbz/content")

        article
          h1 Very Handy in Node & Express!

        article
          img.wide(src="https://wes.io/ntkI/content")

        article
          img.wide(src="https://wes.io/nuqs/content")
          p Normally we'd Handle each possible Error with next()

        article
          img.wide(src="https://wes.io/nunX/content")

        article
          p ðŸ¤” But that doesn't cover errors we throw, unhandled errors or syntax errors...

        article
          p We need to catch all errors and pass along to the next middleware function

        article
          h1 Enter HOF

        article
          img.wide(src="https://wes.io/nteh/content")

        article
          p Then we just wrap our routes!
          img.wide(src="https://wes.io/nuda/content")
          p Any unhandled error will simply get passed along to next()

        //- Option 4
        article
          p.sub Option #4
          h1 Handle The Error When you Call it

        article
          img.wide(src="https://wes.io/nyqR/content")

        //- Option 2
        article
          p.sub Option #5
          h2 Node's Unhandled Rejection Event
          p.sub Node.js will soon exit your process on unhandled rejected promises

        article
          img.wide(src="https://wes.io/ntqa/content")

        article
          h1 Neat!
          p This is the part of the talk where<br>I check how much time I have left

        article
          h1 Some Future Stuff
          p Not totally a standard yet

        article
          h1 Web Speech Detection
          p DEMO TIME

        article
          h1 Shape Detection
          p Faces, Barcodes and Text
          p DEMO TIME

        article
          h1.big Thanks Folks!
          p.sub Questions?
          p.sub (I have lots of stickers too!)


      script(src='scripts.js')
      script(src='custom.js')
